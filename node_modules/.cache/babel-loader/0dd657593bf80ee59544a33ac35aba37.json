{"ast":null,"code":"var _jsxFileName = \"/Users/user/sei-cranberry-gobblers/Project-3/Project-3-react-issue-client/react-issue-app/src/IssueContainer/index.js\";\nimport React, { Component } from 'react';\nimport IssueList from '../IssueList';\nimport CreateIssue from '../CreateIssueForm';\nimport { Grid } from 'semantic-ui-react';\n\nclass IssueContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getIssues = async () => {\n      try {\n        const issues = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/');\n        const parsedIssues = await issues.json();\n        console.log(parsedIssues);\n        this.setState({\n          issues: parsedIssues.data\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.addIssue = async (e, issue) => {\n      e.preventDefault();\n      console.log(issue);\n\n      try {\n        // Send JSON\n        // createdIssue variable storing response from Flask API\n        const createdIssueResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/', {\n          method: 'POST',\n          body: JSON.stringify(issue),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }); // turn the response from Flask into an object we can use\n\n        const parsedResponse = await createdIssueResponse.json();\n        console.log(parsedResponse, ' this is response'); // empty all issues in state to new array then\n        // adding issue we created to the end of it\n\n        this.setState({\n          issues: [...this.state.issues, parsedResponse.data]\n        });\n      } catch (err) {\n        console.log('error');\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      issues: []\n    };\n  }\n\n  componentDidMount() {\n    this.getIssues();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(IssueList, {\n      issues: this.state.issues,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(CreateIssueForm, {\n      addIssue: this.addIssue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default IssueContainer;","map":{"version":3,"sources":["/Users/user/sei-cranberry-gobblers/Project-3/Project-3-react-issue-client/react-issue-app/src/IssueContainer/index.js"],"names":["React","Component","IssueList","CreateIssue","Grid","IssueContainer","constructor","props","getIssues","issues","fetch","process","env","REACT_APP_API_URL","parsedIssues","json","console","log","setState","data","err","addIssue","e","issue","preventDefault","createdIssueResponse","method","body","JSON","stringify","headers","parsedResponse","state","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AAEA,MAAMC,cAAN,SAA6BJ,SAA7B,CAAuC;AACtCK,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;;AADiB,SAWlBC,SAXkB,GAWN,YAAY;AAEvB,UAAI;AACH,cAAMC,MAAM,GAAG,MAAMC,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,iBAAjC,CAA1B;AACA,cAAMC,YAAY,GAAG,MAAML,MAAM,CAACM,IAAP,EAA3B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACA,aAAKI,QAAL,CAAc;AACbT,UAAAA,MAAM,EAAEK,YAAY,CAACK;AADR,SAAd;AAID,OARA,CAQC,OAAMC,GAAN,EAAU;AACXJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACC;AACD,KAxBiB;;AAAA,SA0BlBC,QA1BkB,GA0BP,OAAOC,CAAP,EAAUC,KAAV,KAAoB;AAC9BD,MAAAA,CAAC,CAACE,cAAF;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;;AAEA,UAAI;AAEH;AACA;AACA,cAAME,oBAAoB,GAAG,MAAMf,KAAK,CAACC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,iBAAjC,EAAoD;AAC3Fa,UAAAA,MAAM,EAAE,MADmF;AAE3FC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,KAAf,CAFqF;AAG3FO,UAAAA,OAAO,EAAE;AACR,4BAAgB;AADR;AAHkF,SAApD,CAAxC,CAJG,CAYH;;AACA,cAAMC,cAAc,GAAG,MAAMN,oBAAoB,CAACV,IAArB,EAA7B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYc,cAAZ,EAA4B,mBAA5B,EAdG,CAgBH;AACA;;AAEA,aAAKb,QAAL,CAAc;AAACT,UAAAA,MAAM,EAAE,CAAC,GAAG,KAAKuB,KAAL,CAAWvB,MAAf,EAAuBsB,cAAc,CAACZ,IAAtC;AAAT,SAAd;AAEA,OArBD,CAqBE,OAAMC,GAAN,EAAU;AACXJ,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACA;AACD,KAvDiB;;AAGjB,SAAKY,KAAL,GAAa;AACZvB,MAAAA,MAAM,EAAE;AADI,KAAb;AAGA;;AAEDwB,EAAAA,iBAAiB,GAAE;AAClB,SAAKzB,SAAL;AACA;;AAgDD0B,EAAAA,MAAM,GAAE;AACP,WACC,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,oBAAC,SAAD;AAAW,MAAA,MAAM,EAAE,KAAKF,KAAL,CAAWvB,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAEC,oBAAC,eAAD;AAAiB,MAAA,QAAQ,EAAE,KAAKY,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADD;AAMA;;AAlEqC;;AAsEvC,eAAehB,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport IssueList from '../IssueList';\nimport CreateIssue from '../CreateIssueForm';\nimport { Grid } from 'semantic-ui-react';\n\nclass IssueContainer extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tissues: []\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.getIssues();\n\t}\n\tgetIssues = async () => {\n\n\t\ttry {\n\t\t\tconst issues = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/');\n\t\t\tconst parsedIssues = await issues.json();\n\t\t\tconsole.log(parsedIssues);\n\t\t\tthis.setState({\n\t\t\t\tissues: parsedIssues.data\n\t\t\t})\n\t\t\n\t} catch(err){\n\t\tconsole.log(err);\n\t\t}\n\t}\n// Add Issue method\n\taddIssue = async (e, issue) => {\n\t\te.preventDefault();\n\t\tconsole.log(issue);\n\n\t\ttry {\n\n\t\t\t// Send JSON\n\t\t\t// createdIssue variable storing response from Flask API\n\t\t\tconst createdIssueResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(issue),\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// turn the response from Flask into an object we can use\n\t\t\tconst parsedResponse = await createdIssueResponse.json();\n\t\t\tconsole.log(parsedResponse, ' this is response');\n\n\t\t\t// empty all issues in state to new array then\n\t\t\t// adding issue we created to the end of it\n\n\t\t\tthis.setState({issues: [...this.state.issues, parsedResponse.data]})\n\t\t\n\t\t} catch(err){\n\t\t\tconsole.log('error')\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n\n\n\trender(){\n\t\treturn(\n\t\t\t<React.Fragment>\n\t\t\t\t<IssueList issues={this.state.issues} />\n\t\t\t\t<CreateIssueForm addIssue={this.addIssue} />\n\t\t\t</React.Fragment>\n\t\t\t)\n\t}\n\n}\n\nexport default IssueContainer\n"]},"metadata":{},"sourceType":"module"}