{"ast":null,"code":"import _defineProperty from \"/Users/user/sei-cranberry-gobblers/Project-3/Project-3-react-issue-client/react-issue-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/user/sei-cranberry-gobblers/Project-3/Project-3-react-issue-client/react-issue-app/src/IssueContainer/index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport IssueList from '../IssueList';\nimport CreateIssue from '../CreateIssueForm';\nimport EditIssueModal from '../EditIssueModal';\nimport { Grid } from 'semantic-ui-react';\n\nclass IssueContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getIssues = async () => {\n      try {\n        const issues = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/', {\n          // added this callback to send over the session cookie\n          credentials: 'include',\n          method: \"GET\"\n        });\n        const parsedIssues = await issues.json();\n        console.log(parsedIssues);\n        this.setState({\n          issues: parsedIssues.data\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.addIssue = async (e, issue) => {\n      e.preventDefault();\n      console.log(issue);\n\n      try {\n        // Send JSON\n        // createdIssue variable storing response from Flask API\n        const createdIssueResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/', {\n          method: 'POST',\n          body: JSON.stringify(issue),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }); // turn the response from Flask into an object we can use\n\n        const parsedResponse = await createdIssueResponse.json();\n        console.log(parsedResponse, ' this is response'); // empty all issues in state to new array then\n        // adding issue we created to the end of it\n\n        this.setState({\n          issues: [...this.state.issues, parsedResponse.data]\n        });\n      } catch (err) {\n        console.log('error');\n        console.log(err);\n      }\n    };\n\n    this.deleteIssue = async id => {\n      console.log(id);\n      const deleteIssueResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/' + id, {\n        method: 'DELETE'\n      });\n      const deleteIssueParsed = await deleteIssueResponse.json();\n      console.log(deleteIssueResponse); // now that the db has deleted our item, we need to remove it from state\n\n      this.setState({\n        issues: this.state.issues.filter(issue => issue.id !== id)\n      });\n      console.log(deleteIssueParsed, ' response from Flask server'); // then make the delete request, then remove the dog from the state array using filter\n    };\n\n    this.openEditModal = issueFromTheList => {\n      console.log(issueFromTheList, ' issueToEdit ');\n      this.setState({\n        showEditModal: true,\n        issueToEdit: _objectSpread({}, issueFromTheList)\n      });\n    };\n\n    this.handleEditChange = e => {\n      this.setState({\n        issueToEdit: _objectSpread({}, this.state.issueToEdit, {\n          [e.currentTarget.name]: e.currentTarget.value\n        })\n      });\n    };\n\n    this.closeAndEdit = async e => {\n      e.preventDefault();\n\n      try {\n        const editResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/' + this.state.issueToEdit.id, {\n          method: \"PUT\",\n          credentials: 'include',\n          body: JSON.stringify(this.state.issueToEdit),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const editResponseParsed = await editResponse.json();\n        console.log('editResponseParsed: ', editResponseParsed);\n        const newIssueArrayWithEdit = this.state.issues.map(issue => {\n          if (issue.id === editResponseParsed.data.id) {\n            issue = editResponseParsed.data;\n          }\n\n          return issue;\n        });\n        this.setState({\n          issues: newIssueArrayWithEdit,\n          showEditModal: false\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.state = {\n      issues: [],\n      issueToEdit: {\n        subject: '',\n        created_at: '',\n        id: ''\n      },\n      showEditModal: false\n    };\n  }\n\n  componentDidMount() {\n    this.getIssues();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(IssueList, {\n      issues: this.state.issues,\n      deleteIssue: this.deleteIssue,\n      openEditModal: this.openEditModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(CreateIssue, {\n      addIssue: this.addIssue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(EditIssueModal, {\n      handleEditChange: this.handleEditChange,\n      open: this.state.showEditModal,\n      issueToEdit: this.state.issueToEdit,\n      closeAndEdit: this.closeAndEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default IssueContainer;","map":{"version":3,"sources":["/Users/user/sei-cranberry-gobblers/Project-3/Project-3-react-issue-client/react-issue-app/src/IssueContainer/index.js"],"names":["React","Component","IssueList","CreateIssue","EditIssueModal","Grid","IssueContainer","constructor","props","getIssues","issues","fetch","process","env","REACT_APP_API_URL","credentials","method","parsedIssues","json","console","log","setState","data","err","addIssue","e","issue","preventDefault","createdIssueResponse","body","JSON","stringify","headers","parsedResponse","state","deleteIssue","id","deleteIssueResponse","deleteIssueParsed","filter","openEditModal","issueFromTheList","showEditModal","issueToEdit","handleEditChange","currentTarget","name","value","closeAndEdit","editResponse","editResponseParsed","newIssueArrayWithEdit","map","subject","created_at","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport IssueList from '../IssueList';\nimport CreateIssue from '../CreateIssueForm';\nimport EditIssueModal from '../EditIssueModal';\nimport { Grid } from 'semantic-ui-react';\n\nclass IssueContainer extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tissues: [],\n\t\t\tissueToEdit: {\n\t\t\t\tsubject: '',\n\t\t\t\tcreated_at: '',\n\t\t\t\tid: ''\n\t\t\t},\n\t\t\tshowEditModal: false\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.getIssues();\n\t}\n\tgetIssues = async () => {\n\n\t\ttry {\n\t\t\tconst issues = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/',\n\t\t\t\t{ // added this callback to send over the session cookie\n\t\t\t\t\tcredentials: 'include',\n\t\t\t\t\tmethod: \"GET\"\n\t\t\t\t});\n\t\t\tconst parsedIssues = await issues.json();\n\t\t\tconsole.log(parsedIssues);\n\n\t\t\tthis.setState({\n\t\t\t\tissues: parsedIssues.data\n\t\t\t})\n\t\t\n\t} catch(err){\n\t\tconsole.log(err);\n\t\t}\n\t}\n// Add Issue method\n\taddIssue = async (e, issue) => {\n\t\te.preventDefault();\n\t\tconsole.log(issue);\n\n\t\ttry {\n\n\t\t\t// Send JSON\n\t\t\t// createdIssue variable storing response from Flask API\n\t\t\tconst createdIssueResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: JSON.stringify(issue),\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t\t// turn the response from Flask into an object we can use\n\t\t\tconst parsedResponse = await createdIssueResponse.json();\n\t\t\tconsole.log(parsedResponse, ' this is response');\n\n\t\t\t// empty all issues in state to new array then\n\t\t\t// adding issue we created to the end of it\n\n\t\t\tthis.setState({issues: [...this.state.issues, parsedResponse.data]})\n\t\t\n\t\t} catch(err){\n\t\t\tconsole.log('error')\n\t\t\tconsole.log(err)\n\t\t}\n\t}\n\n\tdeleteIssue = async (id) => {\n\n\t\tconsole.log(id)\n\t\tconst deleteIssueResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/' + id, {\n\t\t\t\t\t\t\t\t\t\t\t\t\tmethod: 'DELETE'\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\tconst deleteIssueParsed = await deleteIssueResponse.json();\n\t\tconsole.log(deleteIssueResponse)\n\t\t// now that the db has deleted our item, we need to remove it from state\n\t\tthis.setState({issues: this.state.issues.filter((issue) => issue.id !== id )})\n\n\t\tconsole.log(deleteIssueParsed, ' response from Flask server')\n\t\t\t// then make the delete request, then remove the dog from the state array using filter\n\n\t}\n\n\topenEditModal = (issueFromTheList) => {\n\t\tconsole.log(issueFromTheList, ' issueToEdit ');\n\n\t\tthis.setState({\n\t\t\tshowEditModal: true,\n\t\t\tissueToEdit: {\n\t\t\t\t...issueFromTheList\n\t\t\t}\n\t\t})\n\t}\n\n\thandleEditChange = (e) => {\n    \tthis.setState({\n      \t\tissueToEdit: {\n        \t\t...this.state.issueToEdit,\n        [e.currentTarget.name]: e.currentTarget.value\n      \t\t}\n    \t})\n  \t}\n\n  \tcloseAndEdit = async (e) => {\n    \te.preventDefault();\n\n    \ttry {\n\n      \t\tconst editResponse = await fetch(process.env.REACT_APP_API_URL + '/api/v1/issues/' + this.state.issueToEdit.id, {\n        \t\tmethod : \"PUT\",\n        \t\tcredentials: 'include',\n        \t\tbody: JSON.stringify(this.state.issueToEdit),\n        \t\theaders: {\n          \t\t\t'Content-Type' : 'application/json'\n        \t\t}\n      \t\t});\n\n      const editResponseParsed = await editResponse.json();\n      console.log('editResponseParsed: ', editResponseParsed);\n\n      const newIssueArrayWithEdit = this.state.issues.map((issue)=> {\n        if(issue.id === editResponseParsed.data.id) {\n            issue = editResponseParsed.data\n        }\n        return issue;\n        })\n      \n      this.setState({\n        issues: newIssueArrayWithEdit,\n        showEditModal: false\n      })\n\n    } catch(err) {\n      console.log(err);\n    }\n\n  }\n\n\trender(){\n\t\treturn(\n\t\t\t<React.Fragment>\n\t\t\t\t<IssueList issues={this.state.issues} deleteIssue={this.deleteIssue} openEditModal={this.openEditModal}/>\n\t\t\t\t<CreateIssue addIssue={this.addIssue} />\n\n          \t\t<EditIssueModal handleEditChange={this.handleEditChange} open={this.state.showEditModal} issueToEdit={this.state.issueToEdit} closeAndEdit={this.closeAndEdit}/>\n\t\t\t</React.Fragment>\n\t\t\t)\n\t}\n\n}\n\nexport default IssueContainer\n"]},"metadata":{},"sourceType":"module"}